{"ast":null,"code":"export async function* QuickSort(array, swap, highlight, markSort) {\n  let low = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let high = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : array.length - 1;\n\n  if (low <= high) {\n    let pivot = yield* await partition(array, low, high);\n    yield* await QuickSort(array, swap, highlight, markSort, low, pivot - 1);\n    yield* await QuickSort(array, swap, highlight, markSort, pivot + 1, high);\n  }\n\n  async function* partition(array, low, high) {\n    let pivot = low;\n    let i = low;\n    let j = high + 1;\n\n    while (i < j) {\n      while (--j > low) {\n        yield await highlight([i, j], pivot);\n\n        if (array[j] < array[pivot]) {\n          break;\n        }\n      }\n\n      while (i <= high && i < j) {\n        yield await highlight([i], pivot);\n\n        if (array[++i] > array[pivot]) {\n          break;\n        }\n      }\n\n      if (i < j) {\n        yield await swap(i, j);\n      }\n    }\n\n    if (pivot !== j) {\n      yield await swap(pivot, j);\n    }\n\n    markSort(j);\n    yield;\n    return j;\n  }\n}\n_c = QuickSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuickSort\");","map":{"version":3,"names":["QuickSort","array","swap","highlight","markSort","low","high","length","pivot","partition","i","j"],"sources":["C:/Users/ACER/Desktop/sorting-visualizer-main/src/sortFunctions/QuickSort.js"],"sourcesContent":["export async function* QuickSort(\n  array,\n  swap,\n  highlight,\n  markSort,\n  low = 0,\n  high = array.length - 1\n) {\n\n  if (low <= high) {\n    let pivot = yield* await partition(array, low, high);\n    yield* await QuickSort(array, swap, highlight, markSort, low, pivot - 1);\n    yield* await QuickSort(array, swap, highlight, markSort, pivot + 1, high);\n  }\n\n  async function* partition(array, low, high) {\n    let pivot = low;\n    let i = low;\n    let j = high + 1;\n\n    while (i < j) {\n\n      while (--j > low) {\n        yield await highlight([i, j], pivot);\n        if (array[j] < array[pivot]) {\n          break;\n        }\n      }\n\n      while (i <= high && i < j) {\n        yield await highlight([i], pivot);\n        if (array[++i] > array[pivot]) {\n          break;\n        }\n      }\n\n      if (i < j) {\n        yield await swap(i, j);\n      }\n    }\n\n    if (pivot !== j) {\n      yield await swap(pivot, j);\n    }\n\n    markSort(j);\n    yield;\n    return j;\n  }\n}\n"],"mappings":"AAAA,OAAO,gBAAgBA,SAAhB,CACLC,KADK,EAELC,IAFK,EAGLC,SAHK,EAILC,QAJK,EAOL;EAAA,IAFAC,GAEA,uEAFM,CAEN;EAAA,IADAC,IACA,uEADOL,KAAK,CAACM,MAAN,GAAe,CACtB;;EAEA,IAAIF,GAAG,IAAIC,IAAX,EAAiB;IACf,IAAIE,KAAK,GAAG,OAAO,MAAMC,SAAS,CAACR,KAAD,EAAQI,GAAR,EAAaC,IAAb,CAAlC;IACA,OAAO,MAAMN,SAAS,CAACC,KAAD,EAAQC,IAAR,EAAcC,SAAd,EAAyBC,QAAzB,EAAmCC,GAAnC,EAAwCG,KAAK,GAAG,CAAhD,CAAtB;IACA,OAAO,MAAMR,SAAS,CAACC,KAAD,EAAQC,IAAR,EAAcC,SAAd,EAAyBC,QAAzB,EAAmCI,KAAK,GAAG,CAA3C,EAA8CF,IAA9C,CAAtB;EACD;;EAED,gBAAgBG,SAAhB,CAA0BR,KAA1B,EAAiCI,GAAjC,EAAsCC,IAAtC,EAA4C;IAC1C,IAAIE,KAAK,GAAGH,GAAZ;IACA,IAAIK,CAAC,GAAGL,GAAR;IACA,IAAIM,CAAC,GAAGL,IAAI,GAAG,CAAf;;IAEA,OAAOI,CAAC,GAAGC,CAAX,EAAc;MAEZ,OAAO,EAAEA,CAAF,GAAMN,GAAb,EAAkB;QAChB,MAAM,MAAMF,SAAS,CAAC,CAACO,CAAD,EAAIC,CAAJ,CAAD,EAASH,KAAT,CAArB;;QACA,IAAIP,KAAK,CAACU,CAAD,CAAL,GAAWV,KAAK,CAACO,KAAD,CAApB,EAA6B;UAC3B;QACD;MACF;;MAED,OAAOE,CAAC,IAAIJ,IAAL,IAAaI,CAAC,GAAGC,CAAxB,EAA2B;QACzB,MAAM,MAAMR,SAAS,CAAC,CAACO,CAAD,CAAD,EAAMF,KAAN,CAArB;;QACA,IAAIP,KAAK,CAAC,EAAES,CAAH,CAAL,GAAaT,KAAK,CAACO,KAAD,CAAtB,EAA+B;UAC7B;QACD;MACF;;MAED,IAAIE,CAAC,GAAGC,CAAR,EAAW;QACT,MAAM,MAAMT,IAAI,CAACQ,CAAD,EAAIC,CAAJ,CAAhB;MACD;IACF;;IAED,IAAIH,KAAK,KAAKG,CAAd,EAAiB;MACf,MAAM,MAAMT,IAAI,CAACM,KAAD,EAAQG,CAAR,CAAhB;IACD;;IAEDP,QAAQ,CAACO,CAAD,CAAR;IACA;IACA,OAAOA,CAAP;EACD;AACF;KAjDsBX,S"},"metadata":{},"sourceType":"module"}