{"ast":null,"code":"export async function* HeapSort(array, swap, highlight, markSort) {\n  let arrLength = array.length;\n\n  for (let i = Math.floor(arrLength / 2) - 1; i >= 0; i--) {\n    yield* await maxHeap(i);\n  }\n\n  for (let i = array.length - 1; i > 0; i--) {\n    arrLength--;\n    markSort(arrLength);\n    yield await swap(0, i);\n    yield* await maxHeap(0);\n  }\n\n  markSort(0);\n\n  async function* maxHeap(i) {\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n    let max = i;\n    const highlightArray = [];\n    if (left < arrLength) highlightArray.push(left);\n    if (right < arrLength) highlightArray.push(right);\n    yield await highlight(highlightArray, i);\n\n    if (left < arrLength) {\n      if (array[left] > array[max]) {\n        max = left;\n      }\n    }\n\n    if (right < arrLength) {\n      if (array[right] > array[max]) {\n        max = right;\n      }\n    }\n\n    if (max !== i) {\n      yield await swap(i, max);\n      yield* await maxHeap(max);\n    }\n  }\n}\n_c = HeapSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"HeapSort\");","map":{"version":3,"names":["HeapSort","array","swap","highlight","markSort","arrLength","length","i","Math","floor","maxHeap","left","right","max","highlightArray","push"],"sources":["C:/Users/ACER/Desktop/sorting-visualizer-main/src/sortFunctions/HeapSort.js"],"sourcesContent":["export async function* HeapSort(array, swap, highlight, markSort) {\n  let arrLength = array.length;\n  for (let i = Math.floor(arrLength / 2) - 1; i >= 0; i--) {\n    yield* await maxHeap(i);\n  }\n\n  for (let i = array.length - 1; i > 0; i--) {\n    arrLength--;\n    markSort(arrLength);\n    yield await swap(0, i);\n    yield* await maxHeap(0);\n  }\n\n  markSort(0);\n\n  async function* maxHeap(i) {\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n    let max = i;\n\n    const highlightArray = [];\n    if(left < arrLength)\n      highlightArray.push(left);\n    if(right < arrLength)\n      highlightArray.push(right);\n    yield await highlight(highlightArray, i);\n\n    if(left < arrLength){\n      if (array[left] > array[max]) {\n        max = left;\n      }\n    }\n\n    if(right < arrLength){\n      if (array[right] > array[max]) {\n        max = right;\n      }\n    }\n\n    if (max !== i) {\n      yield await swap(i, max);\n      yield* await maxHeap(max);\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,gBAAgBA,QAAhB,CAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,SAAtC,EAAiDC,QAAjD,EAA2D;EAChE,IAAIC,SAAS,GAAGJ,KAAK,CAACK,MAAtB;;EACA,KAAK,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWJ,SAAS,GAAG,CAAvB,IAA4B,CAAzC,EAA4CE,CAAC,IAAI,CAAjD,EAAoDA,CAAC,EAArD,EAAyD;IACvD,OAAO,MAAMG,OAAO,CAACH,CAAD,CAApB;EACD;;EAED,KAAK,IAAIA,CAAC,GAAGN,KAAK,CAACK,MAAN,GAAe,CAA5B,EAA+BC,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;IACzCF,SAAS;IACTD,QAAQ,CAACC,SAAD,CAAR;IACA,MAAM,MAAMH,IAAI,CAAC,CAAD,EAAIK,CAAJ,CAAhB;IACA,OAAO,MAAMG,OAAO,CAAC,CAAD,CAApB;EACD;;EAEDN,QAAQ,CAAC,CAAD,CAAR;;EAEA,gBAAgBM,OAAhB,CAAwBH,CAAxB,EAA2B;IACzB,MAAMI,IAAI,GAAG,IAAIJ,CAAJ,GAAQ,CAArB;IACA,MAAMK,KAAK,GAAG,IAAIL,CAAJ,GAAQ,CAAtB;IACA,IAAIM,GAAG,GAAGN,CAAV;IAEA,MAAMO,cAAc,GAAG,EAAvB;IACA,IAAGH,IAAI,GAAGN,SAAV,EACES,cAAc,CAACC,IAAf,CAAoBJ,IAApB;IACF,IAAGC,KAAK,GAAGP,SAAX,EACES,cAAc,CAACC,IAAf,CAAoBH,KAApB;IACF,MAAM,MAAMT,SAAS,CAACW,cAAD,EAAiBP,CAAjB,CAArB;;IAEA,IAAGI,IAAI,GAAGN,SAAV,EAAoB;MAClB,IAAIJ,KAAK,CAACU,IAAD,CAAL,GAAcV,KAAK,CAACY,GAAD,CAAvB,EAA8B;QAC5BA,GAAG,GAAGF,IAAN;MACD;IACF;;IAED,IAAGC,KAAK,GAAGP,SAAX,EAAqB;MACnB,IAAIJ,KAAK,CAACW,KAAD,CAAL,GAAeX,KAAK,CAACY,GAAD,CAAxB,EAA+B;QAC7BA,GAAG,GAAGD,KAAN;MACD;IACF;;IAED,IAAIC,GAAG,KAAKN,CAAZ,EAAe;MACb,MAAM,MAAML,IAAI,CAACK,CAAD,EAAIM,GAAJ,CAAhB;MACA,OAAO,MAAMH,OAAO,CAACG,GAAD,CAApB;IACD;EACF;AACF;KA5CsBb,Q"},"metadata":{},"sourceType":"module"}